<?php

/**
 * Created by PhpStorm.
 * User: nik
 * Date: 05.09.2018
 * Time: 17:15
 */

/**
 * Class Product имеет id, картинку, цену, описание , и заголовок для вывода в каталоге
 */
class Product
{
    public $id;
    public $title;
    public $price;
    public $image;
    public $description;

    public function __construct($id = null, $title = null, $price = null, $image = null, $description = null)
    {
        $this->id = $id;
        $this->title = $title;
        $this->price = $price;
        $this->image = $image;
        $this->description = $description;
    }

    public function display()
    {
        echo $this->prepareTitle();
        echo $this->preparePrice();
        echo $this->prepareImage();
        echo $this->prepareDescription();
    }

    protected function prepareTitle()
    {
        return "<h1>{$this->title}</h1>";
    }

    protected function preparePrice()
    {
        return "<span>{$this->price}руб.</span>";
    }

    protected function prepareImage()
    {
        return "<img src='{$this->image}' alt='{$this->title}'>";
    }

    protected function prepareDescription()
    {
        return "<p>{$this->description}</p>";
    }

}

/**
 * Class ProductInBusket наследует все от Product, но дополнительно надо определить
 *количество заказанного товара и его сумму, добавляются соответствующие свойство и метод
 */
class ProductInBusket extends Product
{
    public $quantity;

    public function __construct($id = null, $title = null, $price = null, $image = null, $description = null, $quantity = null, $shipAddress = null)
    {
        parent::__construct($id, $title, $price, $image, $description);
        $this->quantity = $quantity;
    }

    public function display()
    {
        parent::display(); // TODO: Change the autogenerated stub

        echo $this->prepareQuantity();
        echo $this->prepareSum();

    }

    protected function prepareSum()
    {
        $sum = $this->price * $this->quantity;
        return "<span>сумма заказа: {$sum}руб.</span><br>";
    }


    protected function prepareQuantity()
    {
        return "<br><span>количество: {$this->quantity}шт</span><br>";
    }
}

$phone = new Product(1, 'iPhone6', 60000, '../image/iphone6.jpg', 'super phone');
$phone->display();
$phoneInBusket = new ProductInBusket(1, 'iPhone6', 60000, '../image/iphone6.jpg', 'super phone', 2);
$phoneInBusket->display();

/**
 * Результат 1234обусловлен выполнением инкремента статического свойства принадлежащего
 * классу, а сответственно свойство переопределяется с каждым вызовом функцииж
 */
class A {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}
$a1 = new A();
$a2 = new A();
$a1->foo();
$a2->foo();
$a1->foo();
$a2->foo();

/**
 * Результат 1122 обусловлен, тем что статическое свойство $x пренадлежит разным классам
 * несмотря на наследование;
 */
class C {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}
class Q extends C {
}
$a1 = new C;
$b1 = new Q;
$a1->foo();
$b1->foo();
$a1->foo();
$b1->foo();

/**
 * Class X результат будет аналогичен предыдущему, скобки при создании объекта не
 * ставим тк нам не нужно передавать параметры для конструктора
 */
class X {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}
class Y extends X {
}
$a1 = new X;
$b1 = new Y;
$a1->foo();
$b1->foo();
$a1->foo();
$b1->foo();